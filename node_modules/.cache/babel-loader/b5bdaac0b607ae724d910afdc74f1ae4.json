{"ast":null,"code":"var _jsxFileName = \"/home/viswaas/Projects/Expense-tracker/expense/src/components/Main/Form/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport useStyles from './styles';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport formatDate from '../../../utils/formatDate';\nimport { useSpeechContext } from '@speechly/react-client';\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst Form = () => {\n  _s();\n\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount) || !formData.date.includes('-'))) return;\n    const transaction = { ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n    setOpen(true);\n    addTransaction(transaction);\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === \"create_transaction\") {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\") {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(e => {\n        const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\n\n        switch (e.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: e.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: e.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomizedSnackbar, {\n    open: open,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"subtitle1\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, segment && segment.words.map(w => w.value).join(\" \"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.type,\n    onChange: e => setFormData({ ...formData,\n      type: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"Income\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Expense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"Expense\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.category,\n    onChange: e => setFormData({ ...formData,\n      category: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, selectedCategories.map(c => /*#__PURE__*/React.createElement(MenuItem, {\n    key: c.type,\n    value: c.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 57\n    }\n  }, c.type))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Amount\",\n    fullWidth: true,\n    value: formData.amount,\n    onChange: e => setFormData({ ...formData,\n      amount: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"date\",\n    label: \"Date\",\n    fullWidth: true,\n    value: formData.date,\n    onChange: e => setFormData({ ...formData,\n      date: formatDate(e.target.value)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: createTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Create\"));\n};\n\n_s(Form, \"on/Ypw9Er4/qq2Hd5EChuCgpvIk=\", false, function () {\n  return [useStyles, useSpeechContext];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/viswaas/Projects/Expense-tracker/expense/src/components/Main/Form/Form.jsx"],"names":["React","useState","useEffect","useContext","TextField","Typography","Grid","Button","FormControl","InputLabel","Select","MenuItem","useStyles","ExpenseTrackerContext","v4","uuidv4","incomeCategories","expenseCategories","formatDate","useSpeechContext","CustomizedSnackbar","initialState","amount","category","type","date","Date","Form","classes","formData","setFormData","addTransaction","segment","open","setOpen","createTransaction","Number","isNaN","includes","transaction","id","intent","isFinal","entities","forEach","e","value","charAt","slice","toLowerCase","map","iC","selectedCategories","words","w","join","target","c","button"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport {TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\nimport useStyles from './styles'\nimport {ExpenseTrackerContext} from '../../../context/context'\nimport {v4 as uuidv4 } from 'uuid'\nimport {incomeCategories, expenseCategories} from '../../../constants/categories'\nimport formatDate from '../../../utils/formatDate'\nimport {useSpeechContext} from '@speechly/react-client'\nimport CustomizedSnackbar from '../../Snackbar/Snackbar'\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\n\nconst Form = () => {\n    const classes = useStyles()\n    const [formData, setFormData] = useState(initialState)\n    const {addTransaction} = useContext(ExpenseTrackerContext)\n    const {segment} = useSpeechContext()\n    const [open, setOpen] = useState(false)\n\n    const createTransaction = () => {\n        if(Number.isNaN(Number(formData.amount) || !formData.date.includes('-'))) return\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() }\n        setOpen(true)\n        addTransaction(transaction)\n        setFormData(initialState)\n    }\n\n    useEffect(()=>{\n        if(segment){\n            if(segment.intent.intent === 'add_expense'){\n                setFormData({ ...formData, type: 'Expense'})\n            } else if(segment.intent.intent === 'add_income'){\n                setFormData({ ...formData, type: 'Income'})\n            }else if (segment.isFinal && segment.intent.intent === \"create_transaction\"){\n                return createTransaction()\n            }else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\"){\n                return setFormData(initialState)\n            }\n\n            segment.entities.forEach((e)=>{\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\n                switch(e.type){\n                    case 'amount':\n                        setFormData({...formData, amount:e.value})\n                        break\n                    case 'category':\n                        if(incomeCategories.map((iC)=>iC.type).includes(category)){\n                        setFormData({...formData, type: 'Income', category})\n                        }else if(incomeCategories.map((iC)=>iC.type).includes(category)){\n                            setFormData({...formData, type: 'Expense', category})\n\n                        }\n                        break\n\n                    case 'date':\n                        setFormData({...formData, date:e.value})\n                        break\n                    default:\n                        break\n                }\n            })\n\n            if(segment.isFinal && formData.amount && formData.category && formData.type && formData.date){\n                createTransaction(); \n            }\n        }\n    }, [segment])\n\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories\n    return (\n        <Grid container spacing = {2} >\n            <CustomizedSnackbar open={open} setOpen={setOpen}/>\n            <Grid item xs = {12}>\n                <Typography align='center' variant = 'subtitle1' gutterBottom>\n                    {segment && segment.words.map((w)=>w.value).join(\" \")}\n                </Typography>\n            </Grid>\n            <Grid item xs = {6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select value = {formData.type} onChange = {(e) => setFormData({\n                        ...formData, type: e.target.value\n                    })}>\n                        <MenuItem value = \"Income\">Income</MenuItem>\n                        <MenuItem value = \"Expense\">Expense</MenuItem>\n                        \n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs = {6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select value = {formData.category} onChange = {(e) => setFormData({\n                        ...formData, category: e.target.value\n                    })}>\n                        {\n                            selectedCategories.map((c)=><MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)\n                        }\n                    </Select>\n\n                </FormControl>\n            </Grid>\n            <Grid item xs = {6}>\n                <TextField type = \"number\" label = \"Amount\" fullWidth value={formData.amount} onChange = {(e) => setFormData ({ ...formData, amount: e.target.value})}/>\n\n            </Grid>\n            <Grid item xs = {6}>\n                <TextField type = \"date\" label = \"Date\" fullWidth value={formData.date} onChange = {(e) => setFormData ({ ...formData, date: formatDate(e.target.value)})}/>\n\n            </Grid>\n            <Button className = {classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick = {createTransaction}>Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}